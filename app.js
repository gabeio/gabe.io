// Generated by LiveScript 1.2.0
var fs, swig, express, compression, responseTime, crypto, argv, yaml, app, cachekey, start, blog, titles, i$, len$, entry, dates, tags, j$, ref$, len1$, tag, x$;
fs = require('fs');
swig = require('swig');
express = require('express');
compression = require('compression');
responseTime = require('response-time');
crypto = require('crypto');
argv = require('yargs').argv;
yaml = require('js-yaml');
app = express();
start = new Date(Date.now()).toString();
app.locals.cachekey = crypto.createHash('sha512').update(start).digest('base64');
app.engine('swig', swig.renderFile).set('view engine', 'swig').set('views', __dirname + '/views').use(compression()).use(responseTime()).disable('x-powered-by').use('/assets', express['static'](__dirname + '/assets')).use(function(req, res, next){
  if (/mobile/i.test(req.header('user-agent'))) {
    req.ismobile = true;
  } else {
    req.ismobile = false;
  }
  res.locals.url = req.url;
  return next();
});
blog = yaml.safeLoad(fs.readFileSync('./blog.yaml', 'utf8'));
app.locals.blog = blog;
app.locals.links = blog;
titles = {};
for (i$ = 0, len$ = blog.length; i$ < len$; ++i$) {
  entry = blog[i$];
  titles[entry.title] = entry;
}
app.locals.titles = titles;
dates = {};
for (i$ = 0, len$ = blog.length; i$ < len$; ++i$) {
  entry = blog[i$];
  if (dates[entry.date] == null) {
    dates[entry.date] = [];
  }
  dates[entry.date].push(entry);
}
app.locals.dates = dates;
tags = {};
for (i$ = 0, len$ = blog.length; i$ < len$; ++i$) {
  entry = blog[i$];
  if (entry.tags != null) {
    for (j$ = 0, len1$ = (ref$ = entry.tags).length; j$ < len1$; ++j$) {
      tag = ref$[j$];
      if (tags[tag] == null) {
        tags[tag] = [];
      }
      tags[tag].push(entry);
    }
  }
}
app.locals.tags = tags;
x$ = app;
x$.route('/').get(function(req, res, next){
  if (req.ismobile) {
    return next();
  } else {
    res.locals.full = true;
    return res.render('index');
  }
}).get(function(req, res, next){
  res.locals.entries = blog;
  return res.render('m/index');
});
x$.route('/t/:tag').get(function(req, res, next){
  if (req.ismobile) {
    return res.redirect('/');
  } else {
    res.locals.entries = tags[req.params.tag];
    return res.render('index');
  }
});
x$.route('/d/:date').get(function(req, res, next){
  if (req.ismobile) {
    return res.redirect('/');
  } else {
    res.locals.entries = dates[req.params.date];
    return res.render('index');
  }
});
x$.route('/e/:title').get(function(req, res, next){
  if (!req.ismobile) {
    return next('route');
  } else {
    res.locals.entry = titles[req.params.title];
    return res.render('m/entry');
  }
});
x$.listen(Number(process.env.PORT || argv.http || 1337));